basePath: /
definitions:
  cart.cartitem:
    properties:
      product_id:
        type: integer
      status:
        type: string
    required:
    - product_id
    - status
    type: object
  cart.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.CartItem'
        type: array
      total:
        type: integer
    type: object
  catalog.catalog:
    properties:
      description:
        type: string
      featured_medium_id:
        type: integer
      product_ids:
        items:
          type: integer
        type: array
      published_date:
        type: string
      title:
        type: string
    required:
    - published_date
    - title
    type: object
  catalog.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Catalog'
        type: array
      total:
        type: integer
    type: object
  currency.currency:
    properties:
      iso_code:
        type: string
      name:
        type: string
    required:
    - iso_code
    - name
    type: object
  currency.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Currency'
        type: array
      total:
        type: integer
    type: object
  dataset.dataset:
    properties:
      contact_email:
        type: string
      contact_name:
        type: string
      currency_id:
        type: integer
      data_standard:
        type: string
      description:
        type: string
      featured_medium_id:
        type: integer
      frequency:
        type: string
      granularity:
        type: string
      license:
        type: string
      price:
        type: integer
      related_articles:
        type: string
      source:
        type: string
      tag_ids:
        items:
          type: integer
        type: array
      temporal_coverage:
        type: string
      time_saved:
        type: integer
      title:
        type: string
    required:
    - price
    type: object
  dataset.datasetData:
    properties:
      contact_email:
        type: string
      contact_name:
        type: string
      created_at:
        type: string
      currency:
        $ref: '#/definitions/model.Currency'
        type: object
      currency_id:
        type: integer
      data_standard:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      featured_medium:
        $ref: '#/definitions/model.Medium'
        type: object
      featured_medium_id:
        type: integer
      formats:
        items:
          $ref: '#/definitions/model.DatasetFormat'
        type: array
      frequency:
        type: string
      granularity:
        type: string
      id:
        type: integer
      license:
        type: string
      price:
        type: integer
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      related_articles:
        type: string
      source:
        type: string
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
      temporal_coverage:
        type: string
      time_saved:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    required:
    - currency_id
    - price
    type: object
  dataset.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/dataset.datasetData'
        type: array
      total:
        type: integer
    type: object
  format.datasetFormat:
    properties:
      format_id:
        type: integer
      url:
        type: string
    required:
    - format_id
    - url
    type: object
  format.format:
    properties:
      description:
        type: string
      is_default:
        type: boolean
      name:
        type: string
    required:
    - name
    type: object
  format.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Format'
        type: array
      total:
        type: integer
    type: object
  medium.medium:
    properties:
      alt_text:
        type: string
      caption:
        type: string
      description:
        type: string
      dimensions:
        type: string
      file_size:
        type: integer
      name:
        type: string
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      url:
        type: string
    required:
    - file_size
    - name
    type: object
  medium.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Medium'
        type: array
      total:
        type: integer
    type: object
  membership.membership:
    properties:
      plan_id:
        type: integer
    required:
    - plan_id
    type: object
  membership.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Membership'
        type: array
      total:
        type: integer
    type: object
  model.CartItem:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      product:
        $ref: '#/definitions/model.Product'
        type: object
      product_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - product_id
    - status
    - user_id
    type: object
  model.Catalog:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      featured_medium:
        $ref: '#/definitions/model.Medium'
        type: object
      featured_medium_id:
        type: integer
      id:
        type: integer
      plans:
        items:
          $ref: '#/definitions/model.Plan'
        type: array
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      published_date:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.Currency:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      iso_code:
        type: string
      name:
        type: string
      updated_at:
        type: string
    required:
    - iso_code
    - name
    type: object
  model.Dataset:
    properties:
      contact_email:
        type: string
      contact_name:
        type: string
      created_at:
        type: string
      currency:
        $ref: '#/definitions/model.Currency'
        type: object
      currency_id:
        type: integer
      data_standard:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      featured_medium:
        $ref: '#/definitions/model.Medium'
        type: object
      featured_medium_id:
        type: integer
      frequency:
        type: string
      granularity:
        type: string
      id:
        type: integer
      license:
        type: string
      price:
        type: integer
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      related_articles:
        type: string
      source:
        type: string
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
      temporal_coverage:
        type: string
      time_saved:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    required:
    - currency_id
    - price
    type: object
  model.DatasetFormat:
    properties:
      created_at:
        type: string
      dataset_id:
        type: integer
      deleted_at:
        type: string
      format:
        $ref: '#/definitions/model.Format'
        type: object
      format_id:
        type: integer
      id:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  model.Format:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.Medium:
    properties:
      alt_text:
        type: string
      caption:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      dimensions:
        type: string
      file_size:
        type: integer
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  model.Membership:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      payment:
        $ref: '#/definitions/model.Payment'
        type: object
      payment_id:
        type: integer
      plan:
        $ref: '#/definitions/model.Plan'
        type: object
      plan_id:
        type: integer
      razorpay_order_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - plan_id
    - status
    - user_id
    type: object
  model.Order:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      payment:
        $ref: '#/definitions/model.Payment'
        type: object
      payment_id:
        type: integer
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      razorpay_order_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - status
    - user_id
    type: object
  model.Payment:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      currency:
        $ref: '#/definitions/model.Currency'
        type: object
      currency_id:
        type: integer
      deleted_at:
        type: string
      gateway:
        type: string
      id:
        type: integer
      razorpay_payment_id:
        type: string
      razorpay_signature:
        type: string
      status:
        type: string
      updated_at:
        type: string
    required:
    - amount
    - currency_id
    - gateway
    - status
    type: object
  model.Plan:
    properties:
      catalogs:
        items:
          $ref: '#/definitions/model.Catalog'
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: integer
      name:
        type: string
      status:
        type: string
      updated_at:
        type: string
    required:
    - duration
    - name
    - status
    type: object
  model.Product:
    properties:
      catalogs:
        items:
          $ref: '#/definitions/model.Catalog'
        type: array
      created_at:
        type: string
      currency:
        $ref: '#/definitions/model.Currency'
        type: object
      currency_id:
        type: integer
      datasets:
        items:
          $ref: '#/definitions/model.Dataset'
        type: array
      deleted_at:
        type: string
      featured_medium:
        $ref: '#/definitions/model.Medium'
        type: object
      featured_medium_id:
        type: integer
      id:
        type: integer
      orders:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      price:
        type: integer
      slug:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
      title:
        type: string
      updated_at:
        type: string
    required:
    - currency_id
    - price
    - slug
    - status
    - title
    type: object
  model.Tag:
    properties:
      created_at:
        type: string
      datasets:
        items:
          $ref: '#/definitions/model.Dataset'
        type: array
      deleted_at:
        type: string
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - slug
    - title
    type: object
  order.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      total:
        type: integer
    type: object
  payment.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Payment'
        type: array
      total:
        type: integer
    type: object
  payment.payment:
    properties:
      amount:
        type: integer
      currency_id:
        type: integer
      gateway:
        type: string
      razorpay_order_id:
        type: string
      razorpay_payment_id:
        type: string
      razorpay_signature:
        type: string
      status:
        type: string
    required:
    - amount
    - currency_id
    - razorpay_order_id
    - razorpay_payment_id
    - razorpay_signature
    type: object
  plan.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Plan'
        type: array
      total:
        type: integer
    type: object
  plan.plan:
    properties:
      catalog_ids:
        items:
          type: integer
        type: array
      description:
        type: string
      duration:
        type: integer
      name:
        type: string
      status:
        type: string
    required:
    - duration
    - name
    type: object
  product.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      total:
        type: integer
    type: object
  product.product:
    properties:
      currency_id:
        type: integer
      dataset_ids:
        items:
          type: integer
        type: array
      featured_medium_id:
        type: integer
      price:
        type: integer
      slug:
        type: string
      status:
        type: string
      tag_ids:
        items:
          type: integer
        type: array
      title:
        type: string
    required:
    - price
    - slug
    - title
    type: object
  search.searchQuery:
    properties:
      facetFilters:
        items:
          type: string
        type: array
      filters:
        type: string
      limit:
        type: integer
      q:
        type: string
    required:
    - q
    type: object
  tag.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
      total:
        type: integer
    type: object
  tag.tag:
    properties:
      slug:
        type: string
      title:
        type: string
    required:
    - slug
    - title
    type: object
host: localhost:7720
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Data portal API
  version: "1.0"
paths:
  /cartitems:
    get:
      description: Get all carts
      operationId: get-all-carts
      parameters:
      - description: User ID
        in: header
        name: X-User
        type: string
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cart.paging'
      summary: Show all carts
      tags:
      - Cart
    post:
      description: create cart
      operationId: add-cart
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Cart Item object
        in: body
        name: CartItem
        required: true
        schema:
          $ref: '#/definitions/cart.cartitem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CartItem'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create cart
      tags:
      - Cart
  /cartitems/{cartitem_id}:
    delete:
      description: Delete cart by ID
      operationId: delete-cart-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Cart Item ID
        in: path
        name: cartitem_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a cart
      tags:
      - Cart
    get:
      description: Get cart by ID
      operationId: get-cart-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Cart Item ID
        in: path
        name: cartitem_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CartItem'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a cart by id
      tags:
      - Cart
  /catalogs:
    get:
      description: Get all catalogs
      operationId: get-all-catalogs
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/catalog.paging'
      summary: Show all catalogs
      tags:
      - Catalog
    post:
      description: create catalog
      operationId: add-catalog
      parameters:
      - description: Catalog object
        in: body
        name: Catalog
        required: true
        schema:
          $ref: '#/definitions/catalog.catalog'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Catalog'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create catalog
      tags:
      - Catalog
  /catalogs/{catalog_id}:
    delete:
      description: Delete catalog by ID
      operationId: delete-catalog-by-id
      parameters:
      - description: Catalog ID
        in: path
        name: catalog_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a catalog
      tags:
      - Catalog
    get:
      description: Get catalog by ID
      operationId: get-catalog-by-id
      parameters:
      - description: Catalog ID
        in: path
        name: catalog_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Catalog'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a catalog by id
      tags:
      - Catalog
    put:
      description: Update catalog by ID
      operationId: update-catalog-by-id
      parameters:
      - description: Catalog ID
        in: path
        name: catalog_id
        required: true
        type: string
      - description: Catalog
        in: body
        name: Catalog
        schema:
          $ref: '#/definitions/catalog.catalog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Catalog'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Update a catalog by id
      tags:
      - Catalog
  /currencies:
    get:
      description: Get all currencies
      operationId: get-all-currencies
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/currency.paging'
      summary: Show all currencies
      tags:
      - Currency
    post:
      description: Create currency
      operationId: add-currency
      parameters:
      - description: Currency object
        in: body
        name: Currency
        required: true
        schema:
          $ref: '#/definitions/currency.currency'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Currency'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create currency
      tags:
      - Currency
  /currencies/{currency_id}:
    delete:
      description: Delete currency by ID
      operationId: delete-currency-by-id
      parameters:
      - description: Currency ID
        in: path
        name: currency_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a currency
      tags:
      - Currency
    get:
      description: get currency by ID
      operationId: get-currency-by-id
      parameters:
      - description: Currency ID
        in: path
        name: currency_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Currency'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a currency by id
      tags:
      - Currency
    put:
      description: Update currency by ID
      operationId: update-currency-by-id
      parameters:
      - description: Currency ID
        in: path
        name: currency_id
        required: true
        type: string
      - description: Currency
        in: body
        name: Currency
        schema:
          $ref: '#/definitions/currency.currency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Currency'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Update a currency by id
      tags:
      - Currency
  /datasets:
    get:
      description: Get all datsets
      operationId: get-all-datsets
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataset.paging'
      summary: Show all datsets
      tags:
      - Dataset
    post:
      description: create dataset
      operationId: add-dataset
      parameters:
      - description: Dataset object
        in: body
        name: Dataset
        required: true
        schema:
          $ref: '#/definitions/dataset.dataset'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Dataset'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create dataset
      tags:
      - Dataset
  /datasets/{dataset_id}:
    delete:
      description: Delete dataset by ID
      operationId: delete-dataset-by-id
      parameters:
      - description: Dataset ID
        in: path
        name: dataset_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a dataset
      tags:
      - Dataset
    get:
      description: Get dataset by ID
      operationId: get-dataset-by-id
      parameters:
      - description: Dataset ID
        in: path
        name: dataset_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Dataset'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a dataset by id
      tags:
      - Dataset
    put:
      description: Update dataset by ID
      operationId: update-dataset-by-id
      parameters:
      - description: Dataset ID
        in: path
        name: dataset_id
        required: true
        type: string
      - description: Dataset
        in: body
        name: Dataset
        schema:
          $ref: '#/definitions/dataset.dataset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Dataset'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Update a dataset by id
      tags:
      - Dataset
  /datasets/{dataset_id}/format:
    post:
      description: Create dataset format
      operationId: add-dataset-format
      parameters:
      - description: Dataset ID
        in: path
        name: dataset_id
        required: true
        type: string
      - description: Dataset Format object
        in: body
        name: DatasetFormat
        required: true
        schema:
          $ref: '#/definitions/format.datasetFormat'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.DatasetFormat'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create dataset format
      tags:
      - Dataset Format
  /datasets/{dataset_id}/format/{format_id}:
    delete:
      description: Delete dataset format by ID
      operationId: delete-dataset-format-by-id
      parameters:
      - description: Dataset ID
        in: path
        name: dataset_id
        required: true
        type: string
      - description: Dataset Format ID
        in: path
        name: format_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a dataset format
      tags:
      - Dataset Format
  /formats:
    get:
      description: Get all formats
      operationId: get-all-formats
      parameters:
      - description: limit per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/format.paging'
      summary: Show all formats
      tags:
      - Format
    post:
      description: Create format
      operationId: add-format
      parameters:
      - description: Format object
        in: body
        name: Format
        required: true
        schema:
          $ref: '#/definitions/format.format'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Format'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create format
      tags:
      - Format
  /formats/{format_id}:
    delete:
      description: Delete format by ID
      operationId: delete-format-by-id
      parameters:
      - description: Format ID
        in: path
        name: format_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a format
      tags:
      - Format
    get:
      description: Get format by ID
      operationId: get-format-by-id
      parameters:
      - description: format ID
        in: path
        name: format_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Format'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a format by id
      tags:
      - Format
    put:
      description: Update format by ID
      operationId: update-format-by-id
      parameters:
      - description: Format ID
        in: path
        name: format_id
        required: true
        type: string
      - description: Format
        in: body
        name: format
        schema:
          $ref: '#/definitions/format.format'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Format'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Update a format by id
      tags:
      - Format
  /media:
    get:
      description: Get media
      operationId: get-media
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/medium.paging'
      summary: Show media
      tags:
      - Medium
    post:
      description: Create medium
      operationId: add-medium
      parameters:
      - description: Medium object
        in: body
        name: Medium
        required: true
        schema:
          $ref: '#/definitions/medium.medium'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Medium'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create medium
      tags:
      - Medium
  /media/{medium_id}:
    delete:
      description: Delete medium by ID
      operationId: delete-medium-by-id
      parameters:
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a medium
      tags:
      - Medium
    get:
      description: Get medium by ID
      operationId: get-medium-by-id
      parameters:
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Medium'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a medium by id
      tags:
      - Medium
    put:
      description: Update medium by ID
      operationId: update-medium-by-id
      parameters:
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      - description: Medium
        in: body
        name: Medium
        schema:
          $ref: '#/definitions/medium.medium'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Medium'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Update a medium by id
      tags:
      - Medium
  /memberships:
    get:
      description: Get all memberships
      operationId: get-all-memberships
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/membership.paging'
      summary: Show all memberships
      tags:
      - Membership
    post:
      description: Create membership
      operationId: add-membership
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Membership object
        in: body
        name: Membership
        required: true
        schema:
          $ref: '#/definitions/membership.membership'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Membership'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create membership
      tags:
      - Membership
  /memberships/{membership_id}:
    delete:
      description: Delete membership by ID
      operationId: delete-membership-by-id
      parameters:
      - description: Membership ID
        in: path
        name: membership_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a membership
      tags:
      - Membership
    get:
      description: Get membership by ID
      operationId: get-membership-by-id
      parameters:
      - description: Membership ID
        in: path
        name: membership_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Membership'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a membership by id
      tags:
      - Membership
  /orders:
    get:
      description: Get all orders
      operationId: get-all-orders
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.paging'
      summary: Show all orders
      tags:
      - Order
    post:
      description: create orders
      operationId: add-orders
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create orders
      tags:
      - Order
  /orders/{order_id}:
    delete:
      description: Delete orders by ID
      operationId: delete-orders-by-id
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a orders
      tags:
      - Order
    get:
      description: Get orders by ID
      operationId: get-orders-by-id
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a orders by id
      tags:
      - Order
  /payments:
    get:
      description: Get all payments
      operationId: get-all-payments
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payment.paging'
      summary: Show all payments
      tags:
      - Payment
    post:
      description: Create payment
      operationId: add-payment
      parameters:
      - description: Payment object
        in: body
        name: Payment
        required: true
        schema:
          $ref: '#/definitions/payment.payment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Payment'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create payment
      tags:
      - Payment
  /payments/{payment_id}:
    delete:
      description: Delete payment by ID
      operationId: delete-payment-by-id
      parameters:
      - description: Payment ID
        in: path
        name: payment_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a payment
      tags:
      - Payment
    get:
      description: Get payment by ID
      operationId: get-payment-by-id
      parameters:
      - description: Payment ID
        in: path
        name: payment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Payment'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a payment by id
      tags:
      - Payment
  /plans:
    get:
      description: Get all plans
      operationId: get-all-plans
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plan.paging'
      summary: Show all plans
      tags:
      - Plan
    post:
      description: create plan
      operationId: add-plan
      parameters:
      - description: Plan object
        in: body
        name: Plan
        required: true
        schema:
          $ref: '#/definitions/plan.plan'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Plan'
      summary: Create plan
      tags:
      - Plan
  /plans/{plan_id}:
    delete:
      description: Delete plan by ID
      operationId: delete-plan-by-id
      parameters:
      - description: Plan ID
        in: path
        name: plan_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a plan
      tags:
      - Plan
    get:
      description: Get plan by ID
      operationId: get-plan-by-id
      parameters:
      - description: Plan ID
        in: path
        name: plan_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Plan'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a plan by id
      tags:
      - Plan
    put:
      description: Update plan by ID
      operationId: update-plan-by-id
      parameters:
      - description: Plan ID
        in: path
        name: plan_id
        required: true
        type: string
      - description: Plan
        in: body
        name: Plan
        schema:
          $ref: '#/definitions/plan.plan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Plan'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Update a plan by id
      tags:
      - Plan
  /products:
    get:
      description: Get all products
      operationId: get-all-products
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.paging'
      summary: Show all products
      tags:
      - Product
    post:
      description: Create product
      operationId: add-product
      parameters:
      - description: Product object
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/product.product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create product
      tags:
      - Product
  /products/{product_id}:
    delete:
      description: Delete product by ID
      operationId: delete-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a product
      tags:
      - Product
    get:
      description: Get product by ID
      operationId: get-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a product by id
      tags:
      - Product
    put:
      description: Update product by ID
      operationId: update-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Product
        in: body
        name: Product
        schema:
          $ref: '#/definitions/product.product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Update a product by id
      tags:
      - Product
  /search:
    post:
      description: Global search for all entities
      operationId: search-entities
      parameters:
      - description: Search
        in: body
        name: Search
        schema:
          $ref: '#/definitions/search.searchQuery'
      produces:
      - application/json
      responses:
        "200": {}
      summary: Global search for all entities
      tags:
      - Search
  /tags:
    get:
      description: Get all tags
      operationId: get-all-tags
      parameters:
      - description: limt per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tag.paging'
      summary: Show all tags
      tags:
      - Tag
    post:
      description: Create tag
      operationId: add-tag
      parameters:
      - description: Tag object
        in: body
        name: Tag
        required: true
        schema:
          $ref: '#/definitions/tag.tag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Tag'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create tag
      tags:
      - Tag
  /tags/{tag_id}:
    delete:
      description: Delete tag by ID
      operationId: delete-tag-by-id
      parameters:
      - description: Tag ID
        in: path
        name: tag_id
        required: true
        type: string
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Delete a tag
      tags:
      - Tag
    get:
      description: Get tag by ID
      operationId: get-tag-by-id
      parameters:
      - description: Tag ID
        in: path
        name: tag_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Tag'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Show a tag by id
      tags:
      - Tag
    put:
      description: Update tag by ID
      operationId: update-tag-by-id
      parameters:
      - description: Tag ID
        in: path
        name: tag_id
        required: true
        type: string
      - description: Tag
        in: body
        name: Tag
        schema:
          $ref: '#/definitions/tag.tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Tag'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Update a tag by id
      tags:
      - Tag
swagger: "2.0"
