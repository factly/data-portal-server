basePath: /
definitions:
  actions.currency:
    properties:
      iso_code:
        type: string
      name:
        type: string
    type: object
  actions.membership:
    properties:
      payment_id:
        type: integer
      plan_id:
        type: integer
      status:
        type: string
      user_id:
        type: integer
    type: object
  actions.payment:
    properties:
      amount:
        type: integer
      currency_id:
        type: integer
      gateway:
        type: string
      status:
        type: string
    type: object
  actions.plan:
    properties:
      plan_info:
        type: string
      plan_name:
        type: string
      status:
        type: string
    type: object
  actions.product:
    properties:
      currency_id:
        type: integer
      price:
        type: integer
      product_type_id:
        type: integer
      slug:
        type: string
      status_id:
        type: integer
      title:
        type: string
    type: object
  actions.productType:
    properties:
      name:
        type: string
    type: object
  actions.status:
    properties:
      name:
        type: string
    type: object
  actions.tag:
    properties:
      slug:
        type: string
      title:
        type: string
    type: object
  actions.user:
    properties:
      age:
        type: integer
      email:
        type: string
      name:
        type: string
    type: object
  models.Currency:
    properties:
      created_at:
        type: string
      id:
        type: integer
      iso_code:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Membership:
    properties:
      created_at:
        type: string
      id:
        type: integer
      payment:
        $ref: '#/definitions/models.Payment'
        type: object
      payment_id:
        type: integer
      plan:
        $ref: '#/definitions/models.Plan'
        type: object
      plan_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
        type: object
      user_id:
        type: integer
    type: object
  models.Payment:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      currency:
        $ref: '#/definitions/models.Currency'
        type: object
      currency_id:
        type: integer
      gateway:
        type: string
      id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.Plan:
    properties:
      created_at:
        type: string
      id:
        type: integer
      plan_info:
        type: string
      plan_name:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.Product:
    properties:
      created_at:
        type: string
      currency:
        $ref: '#/definitions/models.Currency'
        type: object
      currency_id:
        type: integer
      id:
        type: integer
      price:
        type: integer
      product_type_id:
        type: integer
      productType:
        $ref: '#/definitions/models.ProductType'
        type: object
      slug:
        type: string
      status:
        $ref: '#/definitions/models.Status'
        type: object
      status_id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.ProductType:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Status:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Tag:
    properties:
      created_at:
        type: string
      id:
        type: integer
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Data portal API
  version: "1.0"
paths:
  /currencies:
    post:
      description: Create currency
      operationId: add-currency
      parameters:
      - description: Currency object
        in: body
        name: Currency
        required: true
        schema:
          $ref: '#/definitions/actions.currency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Currency'
      summary: Create currency
      tags:
      - Currency
  /currencies/{id}:
    delete:
      description: Delete currency by ID
      operationId: delete-currency-by-id
      parameters:
      - description: Currency ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Currency'
      summary: Delete a currency
      tags:
      - Currency
    get:
      description: get currency by ID
      operationId: get-currency-by-id
      parameters:
      - description: Currency ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Currency'
      summary: Show a currency by id
      tags:
      - Currency
    put:
      description: Update currency by ID
      operationId: update-currency-by-id
      parameters:
      - description: Currecny ID
        in: path
        name: id
        required: true
        type: string
      - description: Currency
        in: body
        name: Currency
        schema:
          $ref: '#/definitions/actions.currency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Currency'
      summary: Update a currency by id
      tags:
      - Currency
  /memberships:
    post:
      description: Create membership
      operationId: add-membership
      parameters:
      - description: Membership object
        in: body
        name: Membership
        required: true
        schema:
          $ref: '#/definitions/actions.membership'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Membership'
      summary: Create membership
      tags:
      - Membership
  /memberships/{id}:
    delete:
      description: Delete membership by ID
      operationId: delete-membership-by-id
      parameters:
      - description: Membership ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Membership'
      summary: Delete a membership
      tags:
      - Membership
    get:
      description: Get membership by ID
      operationId: get-membership-by-id
      parameters:
      - description: Membership ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Membership'
      summary: Show a membership by id
      tags:
      - Membership
    put:
      description: Update membership by ID
      operationId: update-membership-by-id
      parameters:
      - description: Membership ID
        in: path
        name: id
        required: true
        type: string
      - description: Membership
        in: body
        name: Membership
        schema:
          $ref: '#/definitions/actions.membership'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Membership'
      summary: Update a membership by id
      tags:
      - Membership
  /payments:
    post:
      description: Create payment
      operationId: add-payment
      parameters:
      - description: Payment object
        in: body
        name: Payment
        required: true
        schema:
          $ref: '#/definitions/actions.payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Payment'
      summary: Create payment
      tags:
      - Payment
  /payments/{id}:
    delete:
      description: Delete payment by ID
      operationId: delete-payment-by-id
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Payment'
      summary: Delete a payment
      tags:
      - Payment
    get:
      description: Get payment by ID
      operationId: get-payment-by-id
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Payment'
      summary: Show a payment by id
      tags:
      - Payment
    put:
      description: Update payment by ID
      operationId: update-payment-by-id
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment
        in: body
        name: Payment
        schema:
          $ref: '#/definitions/actions.payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Payment'
      summary: Update a payment by id
      tags:
      - Payment
  /plans:
    post:
      description: create plan
      operationId: add-plan
      parameters:
      - description: Plan object
        in: body
        name: Plan
        required: true
        schema:
          $ref: '#/definitions/actions.plan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Plan'
      summary: Create plan
      tags:
      - Plan
  /plans/{id}:
    delete:
      description: Delete plan by ID
      operationId: delete-plan-by-id
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Plan'
      summary: Delete a plan
      tags:
      - Plan
    get:
      description: Get plan by ID
      operationId: get-plan-by-id
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Plan'
      summary: Show a plan by id
      tags:
      - Plan
    put:
      description: Update plan by ID
      operationId: update-plan-by-id
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      - description: Plan
        in: body
        name: Plan
        schema:
          $ref: '#/definitions/actions.plan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Plan'
      summary: Update a plan by id
      tags:
      - Plan
  /products:
    post:
      description: Create product
      operationId: add-product
      parameters:
      - description: Product object
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/actions.product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Create product
      tags:
      - Product
  /products/{id}:
    delete:
      description: Delete product by ID
      operationId: delete-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Delete a product
      tags:
      - Product
    get:
      description: Get product by ID
      operationId: get-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Show a product by id
      tags:
      - Product
    put:
      description: Update product by ID
      operationId: update-product-by-id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product
        in: body
        name: Product
        schema:
          $ref: '#/definitions/actions.product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Update a product by id
      tags:
      - Product
  /products/{id}/status:
    post:
      description: Create status
      operationId: add-status
      parameters:
      - description: Status object
        in: body
        name: Status
        required: true
        schema:
          $ref: '#/definitions/actions.status'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
      summary: Create status
      tags:
      - Status
  /products/{id}/type:
    post:
      description: Create product type
      operationId: add-type
      parameters:
      - description: Type object
        in: body
        name: Type
        required: true
        schema:
          $ref: '#/definitions/actions.productType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductType'
      summary: Create product type
      tags:
      - Type
  /tags:
    post:
      description: Create tag
      operationId: add-tag
      parameters:
      - description: Tag object
        in: body
        name: Tag
        required: true
        schema:
          $ref: '#/definitions/actions.tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      summary: Create tag
      tags:
      - Tag
  /tags/{id}:
    delete:
      description: Delete tag by ID
      operationId: delete-tag-by-id
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      summary: Delete a tag
      tags:
      - Tag
    get:
      description: Get tag by ID
      operationId: get-tag-by-id
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      summary: Show a tag by id
      tags:
      - Tag
    put:
      description: Update tag by ID
      operationId: update-tag-by-id
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: Tag
        in: body
        name: Tag
        schema:
          $ref: '#/definitions/actions.tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      summary: Update a tag by id
      tags:
      - Tag
  /users:
    post:
      description: Create user
      operationId: add-user
      parameters:
      - description: User object
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/actions.user'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create user
      tags:
      - User
  /users/{id}:
    delete:
      description: Delete user by ID
      operationId: delete-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Delete a user
      tags:
      - User
    get:
      description: Get user by ID
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Show a user by id
      tags:
      - User
    put:
      description: Update user by ID
      operationId: update-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: User
        schema:
          $ref: '#/definitions/actions.user'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Update a user by id
      tags:
      - User
swagger: "2.0"
