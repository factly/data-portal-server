package action

import (
	"fmt"
	"net/http"

	"github.com/factly/data-portal-server/model"
	"github.com/factly/x/healthx"
	"github.com/factly/x/middlewarex"

	"github.com/factly/data-portal-server/util"

	"github.com/factly/data-portal-server/action/cart"
	"github.com/factly/data-portal-server/action/catalog"
	"github.com/factly/data-portal-server/action/currency"
	"github.com/factly/data-portal-server/action/dataset"
	"github.com/factly/data-portal-server/action/format"
	"github.com/factly/data-portal-server/action/medium"
	"github.com/factly/data-portal-server/action/membership"
	"github.com/factly/data-portal-server/action/membership/user"
	"github.com/factly/data-portal-server/action/order"
	"github.com/factly/data-portal-server/action/payment"
	"github.com/factly/data-portal-server/action/plan"
	"github.com/factly/data-portal-server/action/product"
	"github.com/factly/data-portal-server/action/search"
	"github.com/factly/data-portal-server/action/tag"
	userList "github.com/factly/data-portal-server/action/user"
	_ "github.com/factly/data-portal-server/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/factly/x/loggerx"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"github.com/go-chi/cors"
	"github.com/spf13/viper"
	httpSwagger "github.com/swaggo/http-swagger"
)

// GetCommonRouter returns router with common middleware and settings
func GetCommonRouter() chi.Router {
	r := chi.NewRouter()

	r.Use(middleware.RequestID)
	r.Use(loggerx.Init())
	r.Use(middleware.RealIP)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Heartbeat("/ping"))

	r.Use(cors.Handler(cors.Options{
		// AllowedOrigins: []string{"https://foo.com"}, // Use this to allow specific origin hosts
		AllowedOrigins: []string{"*"},
		// AllowOriginFunc:  func(r *http.Request, origin string) bool { return true },
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))

	sqlDB, _ := model.DB.DB()
	healthx.RegisterRoutes(r, healthx.ReadyCheckers{
		"database":    sqlDB.Ping,
		"keto":        util.KetoChecker,
		"kavach":      util.KavachChecker,
		"kratos":      util.KratosChecker,
		"meilisearch": util.MeiliChecker,
	})

	return r
}

// RegisterUserRoutes - register user routes
func RegisterUserRoutes() http.Handler {

	r := GetCommonRouter()

	r.Mount("/products", product.PublicRouter())
	r.Mount("/catalogs", catalog.PublicRouter())
	r.Mount("/datasets", dataset.PublicRouter())
	r.Mount("/plans", plan.UserRouter())

	r.With(middlewarex.CheckUser, util.CheckOrganisation).Group(func(r chi.Router) {

		r.Mount("/currencies", currency.UserRouter())
		r.Mount("/memberships/{membership_id}/users", user.UserRouter())
		r.Mount("/memberships", membership.UserRouter())
		r.Mount("/payments", payment.UserRouter())
		r.Mount("/tags", tag.UserRouter())
		r.Mount("/formats", format.UserRouter())
		r.Mount("/cartitems", cart.UserRouter())
		r.Mount("/orders", order.UserRouter())
		r.Mount("/media", medium.UserRouter())
		r.Mount("/search", search.Router())
		r.Mount("/users", userList.UserListRouter())

	})
	return r
}

// RegisterAdminRoutes - register admin routes
func RegisterAdminRoutes() http.Handler {

	r := GetCommonRouter()

	r.With(middlewarex.CheckUser, util.CheckOrganisation, middlewarex.CheckAccess("data-portal", 0, util.GetOrganisation), util.CheckSuperOrganisation).Group(func(r chi.Router) {

		r.Mount("/currencies", currency.AdminRouter())
		r.Mount("/plans", plan.AdminRouter())
		r.Mount("/memberships", membership.AdminRouter())
		r.Mount("/payments", payment.AdminRouter())
		r.Mount("/products", product.AdminRouter())
		r.Mount("/tags", tag.AdminRouter())
		r.Mount("/formats", format.AdminRouter())
		r.Mount("/catalogs", catalog.AdminRouter())
		r.Mount("/cartitems", cart.AdminRouter())
		r.Mount("/orders", order.AdminRouter())
		r.Mount("/datasets", dataset.AdminRouter())
		r.Mount("/media", medium.AdminRouter())
		r.Mount("/search", search.Router())

	})

	if viper.IsSet("mode") && viper.GetString("mode") == "development" {
		r.Get("/swagger/*", httpSwagger.WrapHandler)
		fmt.Println("Admin Swagger @ http://localhost:7721/swagger/index.html")
	}

	return r
}
